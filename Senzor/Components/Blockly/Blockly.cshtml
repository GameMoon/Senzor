@inject IJSRuntime jsRunTime
@inject HttpClient httpClient

<button class="btn btn-primary" onclick="@Generate">Generate</button>

<div class="container" id="blocklyArea" style="height: @calculateFullHeight()px">
    <div id="blocklyDiv" style="position: absolute"></div>
</div>


<xml id="toolbox" style="display: none">
    @foreach (var block in workspace)
    {
        <block type="@block.Type"></block>
    }
</xml>


@functions{
    private List<Block> blocks = new List<Block>();
    private List<Block> workspace = new List<Block>();
    private bool blocklyLoaded = false;
    private CommandCreator commandCreator = new CommandCreator();

    private int calculateFullHeight()
    {
        return workspace.Count * 64;
    }

    protected override void OnInit()
    {
        this.addWorkspaceBlocks();
    }

    protected async override Task OnAfterRenderAsync()
    {
        if (!blocklyLoaded)
        {
            await this.initWorkspace();
            //init Blockly
            blocklyLoaded = await jsRunTime.InvokeAsync<bool>("initBlockly");
        }
    }

    private void addWorkspaceBlocks()
    {
        workspace.Add(new Block("logic_compare"));
        workspace.Add(new Block("logic_boolean"));
        workspace.Add(new Block("logic_operation"));
        workspace.Add(new Block("controls_if"));
        workspace.Add(new Block("math_number"));
        workspace.Add(new CustomBlock("node"));
        workspace.Add(new CustomBlock("node_output"));
        workspace.Add(new CustomBlock("node_input"));
        workspace.Add(new CustomBlock("sensor"));
        workspace.Add(new CustomBlock("switch"));
        workspace.Add(new CustomBlock("always"));
    }

    private async Task initWorkspace()
    {
        foreach(var block in workspace)
        {
            if(block is CustomBlock)
            {
                CustomBlock customBlock = (CustomBlock)block;
                await customBlock.Init(jsRunTime,httpClient);
            }
        }
    }

    private async Task updateBlocks()
    {
        string blockString = await jsRunTime.InvokeAsync<String>("getState");
        blocks = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Block>>(blockString);
        foreach(var block in blocks)
        {
            setChildrenBlocks(block);
        }
    }

    private void setChildrenBlocks(Block block)
    {
        List<Block> childrenBlocks = new List<Block>();
        foreach(String childID in block.ChildrenIds)
        {
            Block childBlock = getBlockById(childID);
            if (childBlock != null) childrenBlocks.Add(childBlock);
        }
        block.Children = childrenBlocks;
    }

    private Block getBlockById(String Id)
    {
        foreach (var block in blocks)
        {
            if (block.Id == Id) return block;
        }
        return null;
    }

    public async Task Generate()
    {

        await updateBlocks();
        commandCreator.setBlocks(blocks);
        commandCreator.generateCommands();
        commandCreator.showCommands();

    }
}
@using AutoMapper
@using Blockly.Blocks
@using Newtonsoft.Json.Linq
@inject IJSRuntime jsRunTime
@inject HttpClient httpClient


<div class="container" id="blocklyArea" style="height: @calculateFullHeight()px">
    <div id="blocklyDiv" style="position: absolute"></div>
</div>


<xml id="toolbox" style="display: none">
    @foreach (var block in workspace)
    {
        <block type="@block.Type"></block>
    }
</xml>


@functions{


    [Parameter]
    public Action<List<Block>> BlocksChanged { get; set; }

    private List<Block> blocks = new List<Block>();

    private List<Block> workspace = new List<Block>();
    private bool blocklyLoaded = false;

    private int calculateFullHeight()
    {
        return workspace.Count * 64;
    }


    protected override void OnInit()
    {
        this.initMapper();
        jsRunTime.InvokeAsync<object>("blocklyInterop.passWorkspaceInstance", new DotNetObjectRef(this));
        if (workspace.Count == 0) { this.addWorkspaceBlocks(); }
    }


    private void initMapper()
    {
        try
        {
            AutoMapper.Mapper.Configuration.AssertConfigurationIsValid();
        }
        catch
        {
            Mapper.Initialize(cfg =>
            {
                cfg.CreateMap<Block, LogicCompareBlock>();
                cfg.CreateMap<Block, NodeInputBlock>();
            });
        }
    }

    protected async override Task OnAfterRenderAsync()
    {
        if (!blocklyLoaded)
        {
            await this.initWorkspace();
            //init Blockly
            blocklyLoaded = await jsRunTime.InvokeAsync<bool>("blocklyInterop.initBlockly");
        }
    }

    private void addWorkspaceBlocks()
    {
        workspace.Add(new LogicCompareBlock());
        workspace.Add(new LogicBooleanBlock());
        workspace.Add(new LogicOperationBlock());
        workspace.Add(new ControlsIfBlock());
        workspace.Add(new MathNumberBlock());
        workspace.Add(new NodeBlock());
        workspace.Add(new NodeInputBlock());
        workspace.Add(new SensorBlock());
        workspace.Add(new NodeOutputBlock());
        workspace.Add(new OutputSelectorBlock());
    }

    private async Task initWorkspace()
    {
        foreach (var block in workspace)
        {
            if (block is CustomBlock)
            {
                CustomBlock customBlock = (CustomBlock)block;
                await customBlock.Init(jsRunTime, httpClient);
            }
        }
    }
    private string toBlockClassName(string blockType)
    {
        return String.Join("",blockType.Split('_').Select(word => Char.ToUpper(word[0]) + word.Substring(1)))+"Block";
    }

    [JSInvokable("UpdateBlocks")]
    public async Task updateBlocks()
    {
        string blockString = await jsRunTime.InvokeAsync<String>("blocklyInterop.getState");
        //Console.WriteLine(blockString);
        JArray jArray = JArray.Parse(blockString);

        blocks.Clear();

        foreach( var jBlock in jArray) {
            blocks.Add(BlockParser.parse(jBlock));
        }

        foreach(var newBlock in blocks) { 
        setChildrenBlocks(newBlock);
            }
        
        BlocksChanged?.Invoke(blocks);
    }

    private void setChildrenBlocks(Block block)
    {
        List<Block> childrenBlocks = new List<Block>();

        foreach (String childID in block.InputIds)
        {
            Block childBlock = getBlockById(childID);
            childrenBlocks.Add(childBlock);
        }

        block.Inputs = childrenBlocks;
    }


    private Block getBlockById(String Id)
    {
        if (Id == "") { return null; }

        foreach (var block in blocks)
        {
            if (block.Id == Id) { return block; }
        }
        return null;
    }


}